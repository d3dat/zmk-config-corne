/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&sk {
    quick-release;
    release-after-ms = <2000>;
};

&sl { release-after-ms = <2000>; };

&lt {
    tapping-term-ms = <200>;
    require-prior-idle-ms = <200>;
};

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        num_word: num_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
            ignore-numbers;
        };

        mm_comma: mm_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_COMMA";
            bindings = <&macro_comma>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_comma_ru: mm_comma_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_COMMA_RU";
            bindings = <&macro_comma_ru>, <&kp LS(N4)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_dot: mm_dot {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_DOT";
            bindings = <&macro_dot>, <&kp LS(SEMI)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_dot_ru: mm_dot_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_DOT_RU";
            bindings = <&macro_dot_ru>, <&kp LS(N6)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_minus: mm_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_MINUS";
            bindings = <&kp MINUS>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        swap_win: swapper_win {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            ignored-key-positions = <4 16 19 20 21 22>;
        };

        swap_tab: swapper_tab {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_TAB";
            #binding-cells = <0>;
            bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;

            ignored-key-positions = <4 16 19 20 21 22>;
        };

        lt_sym: lt_sym {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SYM";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&macro_layer_sym>, <&kp>;
        };

        lt_lng: lt_lng {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_LNG";
            bindings = <&mo>, <&macro_lng>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        tp_lng: tp_lng {
            compatible = "zmk,behavior-hold-tap";
            label = "TP_LNG";
            bindings = <&kp>, <&macro_lng>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };
    };

    macros {
        macro_comma: macro_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "MACRO_COMMA";
        };

        macro_comma_ru: macro_comma_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(SLASH) &kp SPACE>;
            label = "MACRO_COMMA_RU";
        };

        macro_dot: macro_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
            label = "MACRO_DOT";
        };

        macro_dot_ru: macro_dot_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SLASH &kp SPACE &sk LSHFT>;
            label = "MACRO_DOT_RU";
        };

        macro_lng: macro_lng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS &tog 2>;
            label = "MACRO_LNG";
        };

        macro_lng_en: macro_lng_sync {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS &to 0>;
            label = "MACRO_LNG_SYNC";
        };

        macro_lt: macro_lt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS &kp LS(COMMA) &kp CAPS>;
            label = "MACRO_LT";
        };

        macro_gt: macro_gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS &kp LS(DOT) &kp CAPS>;
            label = "MACRO_GT";
        };

        macro_num_ru: macro_num_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS &kp HASH &kp CAPS>;
            label = "MACRO_NUM_RU";
        };

        macro_layer_sym: macro_layer_sym {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp CAPS>,
                <&macro_press>,
                <&mo 0 &mo 4>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 4 &mo 0>,
                <&macro_tap>,
                <&kp CAPS>;

            label = "MACRO_LAYER_SYM";
        };

        macro_layer_cmd: macro_layer_cmd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp CAPS>,
                <&macro_press>,
                <&mo 0 &mo 0>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 0 &mo 0>,
                <&macro_tap>,
                <&kp CAPS>;

            label = "MACRO_LAYER_CMD";
        };

        macro_unicode_rqt_l: macro_unicode_rqt_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp CAPS>,
                <&macro_press>,
                <&kp LCTRL &kp LSHFT>,
                <&macro_tap>,
                <&kp U>,
                <&macro_release>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp A &kp B &kp SPACE>,
                <&macro_release>,
                <&kp LCTRL &kp LSHFT>,
                <&macro_tap>,
                <&kp CAPS>;

            label = "MACRO_UNICODE_RQT_L";
        };

        macro_unicode_rqt_r: macro_unicode_rqt_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp CAPS>,
                <&macro_press>,
                <&kp LCTRL &kp LSHFT>,
                <&macro_tap>,
                <&kp U>,
                <&macro_release>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp B &kp B &kp SPACE>,
                <&macro_release>,
                <&kp LCTRL &kp LSHFT>,
                <&macro_tap>,
                <&kp CAPS>;

            label = "MACRO_UNICODE_RQT_R";
        };

        macro_warpd_hint: macro_warpd_hint {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F17 &tog 14>;
            label = "MACRO_WARPD_HINT";
        };

        macro_warpd_esc: macro_warpd_esc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &tog 14>;
            label = "MACRO_WARPD_ESC";
        };

        macro_warpd_click: macro_warpd_click {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &mkp LCLK &tog 14>;
            label = "MACRO_WARPD_CLICK";
        };

        macro_warpd_normal: macro_warpd_normal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F18 &tog 14>;
            label = "MACRO_WARPD_NORMAL";
        };

        macro_en: macro_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F14 &to 0>;
            label = "MACRO_EN";
        };

        macro_ru: macro_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F15 &to 2>;
            label = "MACRO_RU";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lng_l {
            bindings = <&macro_lng>;
            key-positions = <>;
            layers = <0 2>;
        };

        combo_lng_r {
            bindings = <&macro_lng>;
            key-positions = <>;
            layers = <0 2>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <>;
        };

        combo_ret {
            bindings = <&kp RET>;
            key-positions = <>;
        };

        combo_bs {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19>;
        };

        combo_spc {
            bindings = <&kp SPACE>;
            key-positions = <>;
        };

        combo_num_word_en {
            bindings = <&num_word 10>;
            key-positions = <8 20>;
            layers = <0>;
        };

        combo_num_word_ru {
            bindings = <&num_word 11>;
            key-positions = <8 20>;
            layers = <2>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <21 9>;
        };

        combo_mouse_l {
            bindings = <&tog 8>;
            key-positions = <29 17>;
            layers = <1 3 0 2>;
        };

        combo_mouse_r {
            bindings = <&tog 9>;
            key-positions = <30 18>;
            layers = <1 3 0 2>;
        };

        combo_bootloader_l {
            bindings = <&bootloader>;
            key-positions = <0 12>;
        };

        combo_bootloader_r {
            bindings = <&bootloader>;
            key-positions = <11 23>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ALT/ENT |   | HYPER/SPC | BKSP  | RSE |

            bindings = <
&none  &kp Q  &kp W  &kp E  &kp R        &kp T         &kp Y        &kp U  &kp I      &kp O    &kp P     &none
&none  &kp A  &kp S  &kp D  &kp F        &kp G         &kp H        &kp J  &kp K      &kp L    &kp SEMI  &none
&none  &kp Z  &kp X  &kp C  &kp V        &kp B         &kp N        &kp M  &kp COMMA  &kp DOT  &kp FSLH  &none
                     &none  &lt 1 SPACE  &lt 10 ESC    &lt 4 ENTER  &sl 5  &none
            >;
        };

        ext {
            bindings = <
&none  &kp CAPS      &kp BACKSPACE  &kp ESCAPE  &kp DEL    &kp GRAVE    &kp INS     &kp HOME       &kp PG_UP  &kp PG_DN  &kp END    &none
&none  &sk LEFT_GUI  &sk LALT       &sk LCTRL   &sk LSHFT  &swap_win    &kp TAB     &kp LEFT       &kp UP     &kp DOWN   &kp RIGHT  &none
&none  &kp LC(Z)     &kp LC(X)      &kp LC(C)   &kp LC(V)  &swap_tab    &kp RETURN  &kp BACKSPACE  &mm_comma  &mm_dot    &kp DEL    &none
                                    &trans      &trans     &trans       &trans      &trans         &trans
            >;
        };

        ru {
            bindings = <
&trans  &trans  &trans  &trans  &trans       &trans        &trans           &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans       &trans        &trans           &trans  &trans  &trans  &trans  &trans
&none   &trans  &trans  &trans  &trans       &trans        &trans           &trans  &trans  &trans  &trans  &trans
                        &trans  &lt 3 SPACE  &lt 11 ESC    &lt_sym 0 ENTER  &sl 6   &trans
            >;
        };

        ru_ext {
            bindings = <
&none  &kp CAPS      &kp BACKSPACE  &kp ESCAPE  &kp DEL    &kp GRAVE    &kp INS  &kp HOME       &kp PG_UP     &kp PG_DN   &kp END    &none
&none  &sk LEFT_GUI  &sk LALT       &sk LCTRL   &sk LSHFT  &swap_win    &kp TAB  &kp LEFT       &kp UP        &kp DOWN    &kp RIGHT  &none
&none  &kp LC(Z)     &kp LC(X)      &kp LC(C)   &kp LC(V)  &swap_tab    &kp RET  &kp BACKSPACE  &mm_comma_ru  &mm_dot_ru  &kp DEL    &none
                                    &trans      &trans     &trans       &trans   &trans         &trans
            >;
        };

        sym {
            bindings = <
&trans  &kp LT         &kp GT         &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp GRAVE         &kp SQT       &kp LPAR         &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans
&trans  &kp PERCENT    &kp AMPERSAND  &kp AT_SIGN     &kp HASH         &kp TILDE         &kp PLUS      &kp MINUS        &kp COLON              &kp SEMI          &kp DQT            &trans
&trans  &kp BACKSLASH  &kp CARET      &kp DOLLAR      &kp PIPE         &kp UNDERSCORE    &kp QUESTION  &kp EXCLAMATION  &kp EQUAL              &kp ASTERISK      &kp SLASH          &trans
                                      &trans          &trans           &trans            &trans        &trans           &trans
            >;
        };

        cmd {
            bindings = <
&none  &none  &none   &none              &none      &none     &none   &none      &caps_word  &num_word 10  &none     &none
&none  &sl 4  &tog 7  &macro_warpd_hint  &sl 12     &none     &none   &sk LSHFT  &sk LCTRL   &sk LALT      &sk LGUI  &none
&none  &none  &none   &macro_ru          &macro_en  &none     &none   &macro_en  &macro_ru   &none         &none     &none
                      &trans             &trans     &trans    &trans  &trans     &trans
            >;
        };

        cmd_ru {
            bindings = <
&none  &none  &none   &none              &none      &none     &none   &none      &caps_word  &num_word 11  &none     &none
&none  &none  &tog 7  &macro_warpd_hint  &sl 13     &none     &none   &sk LSHFT  &sk LCTRL   &sk LALT      &sk LGUI  &none
&none  &none  &none   &macro_ru          &macro_en  &none     &none   &none      &none       &none         &none     &none
                      &trans             &trans     &trans    &trans  &trans     &trans
            >;
        };

        mouse {
            bindings = <
&trans  &msc SCRL_LEFT  &msc SCRL_DOWN     &msc SCRL_UP  &msc SCRL_RIGHT    &trans    &trans  &msc SCRL_LEFT    &msc SCRL_UP  &msc SCRL_DOWN    &msc SCRL_RIGHT  &trans
&trans  &none           &mmv MOVE_X(-600)  &mkp RCLK     &mkp LCLK          &trans    &trans  &mkp LCLK         &mkp RCLK     &mmv MOVE_X(600)  &none            &trans
&trans  &trans          &kp LALT           &kp LCTRL     &kp LSHFT          &trans    &trans  &kp RSHFT         &kp RCTRL     &kp RALT          &trans           &trans
                                           &none         &mmv MOVE_Y(-600)  &tog 7    &trans  &mmv MOVE_Y(600)  &none
            >;
        };

        mouse_l {
            bindings = <
&none   &msc SCRL_LEFT     &msc SCRL_DOWN    &msc SCRL_UP       &msc SCRL_RIGHT   &none     &none  &none      &none      &none      &none              &none
&none   &mmv MOVE_LEFT     &mmv MOVE_DOWN    &mmv MOVE_UP       &mmv MOVE_RIGHT   &none     &none  &mkp LCLK  &mkp RCLK  &mkp MB3   &macro_warpd_hint  &none
&kp N8  &mmv MOVE_X(-200)  &mmv MOVE_Y(200)  &mmv MOVE_Y(-200)  &mmv MOVE_X(200)  &none     &none  &mkp LCLK  &kp LSHFT  &kp LCTRL  &kp LALT           &none
                                             &none              &none             &tog 8    &none  &none      &none
            >;
        };

        mouse_r {
            bindings = <
&trans  &none              &none      &none      &none      &trans    &trans  &msc SCRL_LEFT     &msc SCRL_UP       &msc SCRL_DOWN    &msc SCRL_RIGHT   &trans
&trans  &macro_warpd_hint  &mkp MB3   &mkp RCLK  &mkp LCLK  &trans    &trans  &mmv MOVE_LEFT     &mmv MOVE_UP       &mmv MOVE_DOWN    &mmv MOVE_RIGHT   &trans
&kp N9  &kp LALT           &kp LCTRL  &kp LSHFT  &mkp LCLK  &trans    &trans  &mmv MOVE_X(-200)  &mmv MOVE_Y(-200)  &mmv MOVE_Y(200)  &mmv MOVE_X(200)  &trans
                                      &none      &none      &tog 9    &trans  &none              &none
            >;
        };

        multi {
            bindings = <
&none  &kp F1       &kp F2        &kp F3     &kp F4    &kp F5     &kp F6   &kp F7     &kp F8     &kp F9   &kp F10    &none
&none  &kp N7       &kp N5        &kp N3     &kp N1    &kp N9     &kp N8   &kp N0     &kp N2     &kp N4   &kp N6     &none
&none  &kp PERCENT  &kp ASTERISK  &kp MINUS  &kp PLUS  &kp F11    &kp F12  &kp EQUAL  &kp COMMA  &kp DOT  &kp SLASH  &none
                                  &trans     &trans    &trans     &trans   &trans     &trans
            >;
        };

        multi_ru {
            bindings = <
&none  &kp F1       &kp F2        &kp F3     &kp F4    &kp F5     &kp F6   &kp F7     &kp F8         &kp F9     &kp F10            &none
&none  &kp N7       &kp N5        &kp N3     &kp N1    &kp N9     &kp N8   &kp N0     &kp N2         &kp N4     &kp N6             &none
&none  &kp PERCENT  &kp ASTERISK  &kp MINUS  &kp PLUS  &kp F11    &kp F12  &kp EQUAL  &kp LS(SLASH)  &kp SLASH  &kp LS(BACKSLASH)  &none
                                  &trans     &trans    &trans     &trans   &trans     &trans
            >;
        };

        alt {
            bindings = <
&none  &none  &none  &none   &none   &none     &kp TILDE     &kp EQUAL        &kp DQT    &kp HASH       &none   &none
&none  &none  &none  &none   &none   &none     &kp PLUS      &kp MINUS        &kp COLON  &kp SEMICOLON  &none   &none
&none  &none  &none  &none   &none   &none     &kp QUESTION  &kp EXCLAMATION  &trans     &trans         &trans  &none
                     &trans  &trans  &trans    &trans        &trans           &trans
            >;
        };

        alt_ru {
            bindings = <
&none  &none  &none  &none   &none   &none     &kp GRAVE   &kp EQUAL        &kp LS(N2)     &kp LS(N3)  &kp LBKT  &none
&none  &none  &none  &none   &none   &none     &kp PLUS    &kp MINUS        &kp LS(N6)     &kp LS(N4)  &kp SQT   &none
&none  &none  &none  &none   &none   &none     &kp LS(N7)  &kp EXCLAMATION  &kp LS(SLASH)  &kp SLASH   &kp RBKT  &none
                     &trans  &trans  &trans    &trans      &trans           &trans
            >;
        };

        hint {
            bindings = <
&none  &kp Q  &kp W  &kp E   &kp R   &kp T               &kp Y               &kp U   &kp I      &kp O       &kp P          &none
&none  &kp A  &kp S  &kp D   &kp F   &kp G               &kp H               &kp J   &kp K      &kp L       &kp SEMICOLON  &none
&none  &kp Z  &kp X  &kp C   &kp V   &kp B               &kp N               &kp M   &kp COMMA  &kp PERIOD  &kp SLASH      &none
                     &trans  &trans  &macro_warpd_esc    &macro_warpd_click  &trans  &trans
            >;
        };

        sys {
            bindings = <
&bootloader  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                             &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num {
            bindings = <
&none  &none     &kp BACKSPACE  &kp ESC  &kp DEL    &none     &kp SLASH   &kp N9  &kp N0  &kp MINUS  &kp EQUAL  &none
&none  &none     &none          &none    &none      &none     &kp PERIOD  &kp N5  &kp N6  &kp N7     &kp N8     &none
&none  &kp LALT  &kp LCTRL      &none    &kp LSHFT  &none     &kp COMMA   &kp N1  &kp N2  &kp N3     &kp N4     &none
                                &trans   &trans     &trans    &trans      &trans  &trans
            >;
        };

        num_ru {
            bindings = <
&none  &none     &kp BACKSPACE  &kp ESC  &kp DEL    &none     &kp LS(BACKSLASH)  &kp N9  &kp N0  &kp MINUS  &kp EQUAL  &none
&none  &none     &none          &none    &none      &none     &kp SLASH          &kp N5  &kp N6  &kp N7     &kp N8     &none
&none  &kp LALT  &kp LCTRL      &none    &kp LSHFT  &none     &kp LS(SLASH)      &kp N1  &kp N2  &kp N3     &kp N4     &none
                                &trans   &trans     &trans    &trans             &trans  &trans
            >;
        };

        fn {
            bindings = <
&none  &none     &none     &none      &none      &none     &none   &kp F9  &kp F10  &kp F11  &kp F12  &none
&none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none     &none   &kp F5  &kp F6   &kp F7   &kp F8   &none
&none  &none     &none     &none      &none      &none     &none   &kp F1  &kp F2   &kp F3   &kp F4   &none
                           &trans     &trans     &trans    &trans  &trans  &trans
            >;
        };

        layer_below {
            // -----------------------------------------------------------------------------------------
            // |      |  !  |  @  |  #  |  $  |    %     |   |  ^  |  &  |  *  |  (  |  )  |   \   |
            // |      |  1  |  2  |  3  |  4  |    5     |   |  -  |  =  |  `  |  [  |  ]  |  "|"  |
            // | SHFT |  6  |  7  |  8  |  9  |    0     |   |  _  |  +  |  ~  |  {  |  }  | RSHFT |
            //                     | GUI |     | ALT/ENT |   | HYPER/SPACE | BKSP |    |

            bindings = <
&trans     &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT       &kp CARET                   &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSLH
&trans     &kp N1    &kp N2  &kp N3    &kp N4    &kp N5          &kp MINUS                   &kp EQUAL  &kp GRAVE        &kp LBKT  &kp RBKT  &kp PIPE
&kp LSHFT  &kp N6    &kp N7  &kp N8    &kp N9    &kp N0          &kp UNDER                   &kp PLUS   &kp TILDE        &kp LBRC  &kp RBRC  &kp RSHFT
                             &kp LGUI  &trans    &tp LALT RET    &tp LC(LS(LA(LGUI))) SPACE  &kp BSPC   &trans
            >;
        };

        layer_above {
            // -----------------------------------------------------------------------------------------
            // |       |  F1  |  F2  |  F3  |  F4  |  F5 |            |  F6  |  F7  |  F8  |  F9  |  F10  |   |
            // |       | Prev | Next | Vol - | Vol + | Play/Pause |   |      | LFT | DWN |  UP | RGT |     |     |
            // | BTCLR | BT1 | BT2 | BT3 | BT4 | BT5 |   |            |     |     |     |     |     |     |
            //                    |     |     |    |                  |     |     |     |

            bindings = <
&trans      &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6    &kp F7    &kp F8  &kp F9     &kp F10  &trans
&trans      &kp C_PREV    &kp C_NEXT    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP        &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans   &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans    &trans    &trans  &trans     &trans   &trans
                                        &trans        &trans        &trans          &trans    &trans    &trans
            >;
        };
    };
};
